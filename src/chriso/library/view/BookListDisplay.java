/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chriso.library.view;

import chriso.library.controller.BookDAO;
import chriso.library.miscelleneous.InputController;
import chriso.library.model.Book;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amit
 */
public class BookListDisplay extends javax.swing.JPanel {

    private String search = ""; //this is to keep track of the seearch query 
    
    private int CALL_FROM_FILTER = -1; // Thiis variable is to track if the call is made form the filter 
    //so that only those record that matches the filter description could be display
    //rather than displaying all the book record which is done by the loadBookData() function
    
    private List<Book> bookList = new ArrayList(); //this variable is initialize 
    //to hold the most 
    //recent updated list of the search Book result on the basis of the search query

    DefaultTableModel model1;
    String columnsList[] = {"isbn", "Book Title", "Book Author", "Available Stock", "Book Shelf", "Column No.", "Row No.", "BookCode-From", "BookCode-Upto"};

    public BookListDisplay() {
        initComponents();
        model1 = new DefaultTableModel(null, columnsList);
        jTable_allBookListDisplay.setModel(model1);

    }

    public void clearRowData() {
        int rowCount = jTable_allBookListDisplay.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            model1.removeRow(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_titleHolder = new javax.swing.JPanel();
        jLabel_title = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_allBookListDisplay = new javax.swing.JTable();
        jButton_showAllBookList = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jComboBox_searchCategory = new javax.swing.JComboBox();
        jTextField_searchInput = new javax.swing.JTextField();
        jLabel_erorrMsg = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(153, 153, 153));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel_titleHolder.setBackground(new java.awt.Color(153, 153, 153));

        jLabel_title.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        jLabel_title.setForeground(new java.awt.Color(0, 102, 102));
        jLabel_title.setText("All Book List of library");

        javax.swing.GroupLayout jPanel_titleHolderLayout = new javax.swing.GroupLayout(jPanel_titleHolder);
        jPanel_titleHolder.setLayout(jPanel_titleHolderLayout);
        jPanel_titleHolderLayout.setHorizontalGroup(
            jPanel_titleHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_titleHolderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_title, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(190, 190, 190))
        );
        jPanel_titleHolderLayout.setVerticalGroup(
            jPanel_titleHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_titleHolderLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel_title)
                .addGap(11, 11, 11)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });
        jScrollPane2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jScrollPane2ComponentShown(evt);
            }
        });

        jTable_allBookListDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable_allBookListDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_allBookListDisplayMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_allBookListDisplay);

        jButton_showAllBookList.setText("Show All Books Detail");
        jButton_showAllBookList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_showAllBookListActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Filter By :");

        jComboBox_searchCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"---Choose---", "Book code", "Title", "Author",}));
        jComboBox_searchCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_searchCategoryItemStateChanged(evt);
            }
        });

        jTextField_searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_searchInputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_searchInputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_searchInputKeyTyped(evt);
            }
        });

        jLabel_erorrMsg.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_titleHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton_showAllBookList, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_searchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_erorrMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel_titleHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_showAllBookList)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox_searchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_erorrMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_showAllBookListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_showAllBookListActionPerformed
        CALL_FROM_FILTER=-1; //IF BY any time the user press this button then 
        //the indicator of the call from the filter needs to be reset;
        loadBookData(null);
    }//GEN-LAST:event_jButton_showAllBookListActionPerformed

    private void jScrollPane2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane2ComponentShown
    }//GEN-LAST:event_jScrollPane2ComponentShown
    private void jTextField_searchInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchInputKeyTyped
    }//GEN-LAST:event_jTextField_searchInputKeyTyped
    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
    }//GEN-LAST:event_jScrollPane2MouseClicked
    private void jTable_allBookListDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_allBookListDisplayMouseClicked
    }//GEN-LAST:event_jTable_allBookListDisplayMouseClicked
  
    private void jTextField_searchInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchInputKeyReleased
        char c = (char)evt.getKeyChar();
        bookList = getBookListToShow(evt,c); //the task of this method is to determing whether the value given 
        //by the user is of corect type or not and to return the list of the book
        //if any match found in the database based on the query
         System.out.println("Search query is"+search); //to keep track what has been searched
        if(bookList!=null){ //otherwise no need to load the list in table
         loadBookData(bookList);
        }
        else{
            clearRowData();
        }
    }//GEN-LAST:event_jTextField_searchInputKeyReleased

    public List<Book> getBookListToShow(KeyEvent evt, char c) {
        String searchCategory = jComboBox_searchCategory.getSelectedItem().toString();
        List<Book> list = new ArrayList();
        BookDAO bookdao = new BookDAO();
        Book book = new Book();
       
        //HINT: searchCategory may have:  "Book code", "Title", "Author"
        if (searchCategory.equalsIgnoreCase("Title")) {
                       CALL_FROM_FILTER=1;
                    if (InputController.allowOnlyWord(evt, c)) {
                        jLabel_erorrMsg.setText("");
                        search+=c;
                        book.setBookTitle(search);
                        System.out.println("bookTitle set as"+search);
                    }
                    else { //when the user press incompatibel number format then display this message
                          search=jTextField_searchInput.getText().trim();
                                //whenever the user press hte incompatible fomat input
                                //above controller condition will consume it 
                                //and whatever is present in the text field is 
                                //set in as the search query 
                                if(!search.equals("")) //when empty no need to set
                                   book.setBookTitle(search);
                                    System.out.println("bookTitle set as"+search);
                                jLabel_erorrMsg.setText("<-Please Enter Correct Value");
                     }

        } else if (searchCategory.equalsIgnoreCase("Book Code")) {
                    CALL_FROM_FILTER=1;
                    if (InputController.allowOnlyNumber(evt, c)) {
                                search+=c;
                                jLabel_erorrMsg.setText("");
                                book.setBookCode(Integer.parseInt(search));
                                System.out.println("bookcode set as"+search);
                            }
                    else { //when the user press incompatibel number format then display this message
                                search=jTextField_searchInput.getText().trim();
                                //whenever the user press hte incompatible fomat input
                                //above controller condition will consume it 
                                //and whatever is present in the text field is 
                                //set in as the search query 
                                if(!search.equals("")) //when empty no need to set
                                    book.setBookCode(Integer.parseInt(search));
                                System.out.println("bookTitle set as"+search);
                                jLabel_erorrMsg.setText("<-Please Enter Correct Value");
                         }
                    
            
        } else if (searchCategory.equalsIgnoreCase("Author")) {
                    CALL_FROM_FILTER=1;
                    if (InputController.allowOnlyWord(evt, c)) {
                       
                        jLabel_erorrMsg.setText("");
                         search+=c;
                        book.setBookAuthor(search);
                        System.out.println("bookauthor set as"+search);
                    }
                    else { //when the user press incompatibel number format then display this message
                        search=jTextField_searchInput.getText().trim();
                                //whenever the user press hte incompatible fomat input
                                //above controller condition will consume it 
                                //and whatever is present in the text field is 
                                //set in as the search query 
                                if(!search.equals("")) //when empty no need to set
                                    book.setBookAuthor(search);
                                System.out.println("bookauthor set as"+search);
                                jLabel_erorrMsg.setText("<-Please Enter Correct Value");
                     }
                    
        } else {
                    
                    book=null;
                    CALL_FROM_FILTER = -1;
                    System.out.println("no search category selected :)");
                    jLabel_erorrMsg.setText("<-Select filter Type first");
        }
        
        
        
        if(book!=null){//if it is null then no need to go further 
               list = bookdao.getBookSearchFilterResult(book, searchCategory);
               System.out.println("got some list");
        //after this statement the book object will consist of all the required value
        return list;
        }else{
            System.out.println("haven't got any list ");
            return null ; // i.e. null list
        }
    }

    
    
    
    
    
    
    
    private void jTextField_searchInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchInputKeyPressed
        
    }//GEN-LAST:event_jTextField_searchInputKeyPressed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    }//GEN-LAST:event_formComponentShown

    private void jComboBox_searchCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_searchCategoryItemStateChanged
       CALL_FROM_FILTER = -1; //RESET THE FILTER CALL INDICATOR ALSO
        search=""; //reset hte search value also
        jTextField_searchInput.setText("");
        //when ever the next search category is selected then the 
        //searchInput field should be cleared for next input
        
        //AUTOMATIC TAKE THE FOCUS TO THE SEARCH INPUT 
        jTextField_searchInput.requestFocus(true);
    }//GEN-LAST:event_jComboBox_searchCategoryItemStateChanged

    public void loadBookData(List<Book> list) {
        clearRowData();
        System.out.println("inside list loading block ..after clearing row data");
        BookDAO bookdao = new BookDAO();
        if (CALL_FROM_FILTER != 1) { //IF CALL IS MADE DIRECTLY THEN DISPLAY ALL RECORD
            //AT THIS TIME THE FILTER VALUE IS RESET TO -1;
            list = bookdao.getAllBookDetailList();
        }
        //now the list will be holding the list of all book record as the object
        if (list != null) {
            //now we have to display the list item in the table
            for (int i = 0; i < list.size(); i++) {
                model1.addRow(new Object[]{
                    list.get(i).getIsbn(),
                    list.get(i).getBookTitle(),
                    list.get(i).getBookAuthor(),
                    list.get(i).getStockAvailable(),
                    list.get(i).getBookShelf(),
                    list.get(i).getCol(),
                    list.get(i).getRow(),
                    list.get(i).getLocalCodeFrom(),
                    list.get(i).getLocalCodeTo()
                });
                //HINT: the column list is as: "isbn", "Book Title", "Book Author",
                //"Available Stock", "Book Shelf", "Column No.", "Row No."
            }
            System.out.println("list data loaded");

        } else {
            JOptionPane.showMessageDialog(null, "Sorry Admin,\nThere is no Book record saved in this system");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_showAllBookList;
    private javax.swing.JComboBox jComboBox_searchCategory;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_erorrMsg;
    private javax.swing.JLabel jLabel_title;
    private javax.swing.JPanel jPanel_titleHolder;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable_allBookListDisplay;
    private javax.swing.JTextField jTextField_searchInput;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chriso.library.view;

import chriso.library.controller.BorrowDAO;
import chriso.library.miscelleneous.InputController;
import chriso.library.model.Borrow;
import com.sun.prism.paint.Color;
import java.awt.event.KeyEvent;
import java.awt.image.ColorModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class BorrowBookListDisplay extends javax.swing.JPanel {

    private int KEY_INPUT = -1;
    DefaultTableModel model2;
    String cols[] = {"StudentId", "Full Name", "Department", "contact", "Book Code", "Book Title", "Taken", "Borrow Date", "Submisstion Date", "Issued By", "Librarian ID", "Status"};
    String searchKey = "";
    List<Borrow> borrowList = new ArrayList();//this variable is initialize to 
    // hold the the most 
    //recent updated list of the search of Borrowed Book result
    //on the basis of the search query

    public BorrowBookListDisplay() {
        initComponents();
        model2 = new DefaultTableModel(null, cols);
        jTable_allBorrowListDisplay.setModel(model2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_allBorrowListDisplay = new javax.swing.JTable();
        jPanel_titleHolder = new javax.swing.JPanel();
        jLabel_title = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButton_showAllBorrowList = new javax.swing.JButton();
        jLabel_filter = new javax.swing.JLabel();
        jComboBox_filterOption = new javax.swing.JComboBox();
        jLabel_errorMsg = new javax.swing.JLabel();
        jTextField_searchInput = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_allBorrowListDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable_allBorrowListDisplay);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 860, 278));

        jPanel_titleHolder.setBackground(new java.awt.Color(153, 153, 153));

        jLabel_title.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        jLabel_title.setForeground(new java.awt.Color(0, 102, 102));
        jLabel_title.setText("Borrow -Book List");

        javax.swing.GroupLayout jPanel_titleHolderLayout = new javax.swing.GroupLayout(jPanel_titleHolder);
        jPanel_titleHolder.setLayout(jPanel_titleHolderLayout);
        jPanel_titleHolderLayout.setHorizontalGroup(
            jPanel_titleHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_titleHolderLayout.createSequentialGroup()
                .addContainerGap(238, Short.MAX_VALUE)
                .addComponent(jLabel_title, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(228, 228, 228))
        );
        jPanel_titleHolderLayout.setVerticalGroup(
            jPanel_titleHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_titleHolderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        add(jPanel_titleHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 0, 870, 70));

        jButton_showAllBorrowList.setBackground(new java.awt.Color(0, 102, 102));
        jButton_showAllBorrowList.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_showAllBorrowList.setForeground(new java.awt.Color(51, 51, 51));
        jButton_showAllBorrowList.setText("Show all Borrow Details");
        jButton_showAllBorrowList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_showAllBorrowListActionPerformed(evt);
            }
        });
        add(jButton_showAllBorrowList, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 73, 203, 31));

        jLabel_filter.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_filter.setText("Filter By: ");
        add(jLabel_filter, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 78, -1, -1));

        jComboBox_filterOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"--Choose--","Isbn No.","bookCode", "Book Name", "Book Status", "Student Id", "StudentName", "DepartMent", "Admin Id", "Admin Name" }));
        jComboBox_filterOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_filterOptionItemStateChanged(evt);
            }
        });
        add(jComboBox_filterOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 78, 145, -1));

        jLabel_errorMsg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_errorMsg.setForeground(new java.awt.Color(255, 0, 0));
        add(jLabel_errorMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(693, 77, 152, 27));

        jTextField_searchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_searchInputActionPerformed(evt);
            }
        });
        jTextField_searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_searchInputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_searchInputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_searchInputKeyTyped(evt);
            }
        });
        add(jTextField_searchInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(506, 73, 171, 31));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 870, 10));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 420, 340, 20));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_showAllBorrowListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_showAllBorrowListActionPerformed
        Borrow borrow = new Borrow();
        BorrowDAO bdao = new BorrowDAO();
        List<Borrow> list = new ArrayList();
        list = bdao.getAllBorrowList();
        //"StudentId", "Full Name","Department", "contact", "Book Code", "Book Title", "Taken",
        //"Borrow Date","Submisstion Date", "Issued By", "Librarian ID"
        if (list != null) {
            jLabel1.setForeground(java.awt.Color.green);
            jLabel1.setText("Some Records Found.... !!!");
            loadBorrowData(list);
        } else {
            jLabel1.setForeground(java.awt.Color.red);
            jLabel1.setText("No Record Found.... !!!");
        }

    }//GEN-LAST:event_jButton_showAllBorrowListActionPerformed

    private void jTextField_searchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_searchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_searchInputActionPerformed

    private void jTextField_searchInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchInputKeyTyped
        char c = (char) evt.getKeyChar();
        checkInputKey(evt, c);
    }//GEN-LAST:event_jTextField_searchInputKeyTyped

    public void checkInputKey(KeyEvent evt, char c) {
        String filter = jComboBox_filterOption.getSelectedItem().toString();
        if (filter.equals("Isbn No.")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyNumber(evt, c)) {
                KEY_INPUT = 1;
                
             } else {//when incompatible input key is pressed;
               KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
               
            }

        } else if (filter.equals("bookCode")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyNumber(evt, c)) {
                KEY_INPUT = 1;
                
            } else {//when incompatible input key is pressed;
                KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
               
            }

        } else if (filter.equals("Book Name")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyWord(evt, c)) {
                 KEY_INPUT = 1;
                return ;
            } else {//when incompatible input key is pressed;
               KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
               
            }

        } else if (filter.equals("Book Status")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyWord(evt, c)) {
               KEY_INPUT = 1;
                
            } else {//when incompatible input key is pressed;
               KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
               
            }
        } else if (filter.equals("Student Id")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyNumber(evt, c)) {
              KEY_INPUT = 1;
                
            } else {//when incompatible input key is pressed;
               KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
               
            }
        } else if (filter.equals("StudentName")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyWord(evt, c)) {
                 KEY_INPUT = 1;
                
            } else {//when incompatible input key is pressed;
               KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
               
            }
        } else if (filter.equals("DepartMent")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyWord(evt, c)) {
              KEY_INPUT = 1;
               
            } else {//when incompatible input key is pressed;
                KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
             
            }
        } else if (filter.equals("Admin Id")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyNumber(evt, c)) {
                KEY_INPUT = 1;
                
            } else {//when incompatible input key is pressed;
               KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
              
            }

        } else if (filter.equals("Admin Name")) {
            jLabel_errorMsg.setText("");
            if (InputController.allowOnlyWord(evt, c)) {
                KEY_INPUT = 1;
                
            } else {//when incompatible input key is pressed;
                KEY_INPUT = -1;
               jLabel_errorMsg.setText("Enter correct value only");
              
            }

        } else {
            jLabel_errorMsg.setText("<-Select the filter type");
            System.out.println("there is no option to search for the borrow list");
        }
    }

    private void jTextField_searchInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchInputKeyReleased
        // TODO add your handling code here
        if (KEY_INPUT == -1 && jTextField_searchInput.getText().equals("")) {
          jLabel1.setText("No Record Found.... !!!");
            return;
        }
        searchKey = jTextField_searchInput.getText().trim();
        borrowList = getBorrowListToDisplay(searchKey);
        if (borrowList != null) {
            jLabel1.setText("Some Records Found.... !!!");
            loadBorrowData(borrowList);
        } else {
            clearRowData();
            jLabel1.setForeground(java.awt.Color.red);
            jLabel1.setText("No Record Found.... !!!");
        }
    }//GEN-LAST:event_jTextField_searchInputKeyReleased
    //this function will does the task of controlling the input method 
    //allowed for the different search category and also return the list of the
    //all borrow object that hold information about the borrowed book

    public List<Borrow> getBorrowListToDisplay(String searchKey) {
        String filter = jComboBox_filterOption.getSelectedItem().toString();
        List<Borrow> list = new ArrayList();
        //"--Choose--","Isbn No.","bookCode", "Book Name", "Book Status", "Student Id",
        //"StudentName", "DepartMent", "Admin Id", "Admin Name"

        Borrow borrow = new Borrow();
        if (filter.equals("Isbn No.")) {
            jLabel_errorMsg.setText("");
            borrow.setIsbn(Long.parseLong(searchKey));
       } else if (filter.equals("bookCode")) {
            jLabel_errorMsg.setText("");
            borrow.setBookId(Integer.parseInt(searchKey));
        } else if (filter.equals("Book Name")) {
            jLabel_errorMsg.setText("");
            borrow.setBookName(searchKey);
            
        } else if (filter.equals("Book Status")) {
            jLabel_errorMsg.setText("");
            borrow.setBookStatus(searchKey);
            
        } else if (filter.equals("Student Id")) {
            jLabel_errorMsg.setText("");
            borrow.setStudentId(Integer.parseInt(searchKey));
           
        } else if (filter.equals("StudentName")) {
            jLabel_errorMsg.setText("");
            borrow.setStudentName(searchKey);
           
        } else if (filter.equals("DepartMent")) {
            jLabel_errorMsg.setText("");
            borrow.setDepartment(searchKey);
            
        } else if (filter.equals("Admin Id")) {
            jLabel_errorMsg.setText("");
            borrow.setLibrarianId(Integer.parseInt(searchKey));
            
        } else if (filter.equals("Admin Name")) {
            jLabel_errorMsg.setText("");
            borrow.setLibrarianName(searchKey);
           
        } else {
            borrow = null;
            jLabel_errorMsg.setText("<-Select the filter type");
            System.out.println("there is no option to search for the borrow list");
        }

        if (borrow != null) {
            BorrowDAO borrowdao = new BorrowDAO();
            list = borrowdao.getFilterSearch(borrow, filter); //filter hold the search category
//"StudentId", "Full Name","Department", "contact", "Book Code", "Book Title", "Taken",
            //"Borrow Date","Submisstion Date", "Issued By", "Librarian ID"
            return list;
        } else {
            return null; //ie. null list 
        }
    }

    private void jTextField_searchInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchInputKeyPressed
        // TODO add your handling code here
    }//GEN-LAST:event_jTextField_searchInputKeyPressed

    private void jComboBox_filterOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_filterOptionItemStateChanged
        searchKey = "";
        jTextField_searchInput.setText("");
        jTextField_searchInput.requestFocus(true);
        if (jComboBox_filterOption.getSelectedItem().toString().equals("Book Status")) {
          jLabel1.setText("Valid status value are : IN, OUT, LOST ");
        }
    }//GEN-LAST:event_jComboBox_filterOptionItemStateChanged

    public void loadBorrowData(List<Borrow> list) {

        clearRowData();

        //now the time has come to display the fetched record of the borrow;
        for (int i = 0; i < list.size(); i++) {
            model2.addRow(new Object[]{
                list.get(i).getStudentId(),
                list.get(i).getStudentName(),
                list.get(i).getDepartment(),
                list.get(i).getContact(),
                list.get(i).getBookId(),
                list.get(i).getBookTitle(),
                list.get(i).getBorrowQuantity(),
                list.get(i).getBorrowDate(),
                list.get(i).getSubmisionDate(),
                list.get(i).getLibrarianName(),
                list.get(i).getLibrarianId(),
                list.get(i).getClearStatus()});
            System.out.println("successfully displayed all the records in the table;");
        }
    }

    public void clearRowData() {
        int row = jTable_allBorrowListDisplay.getRowCount();
        for (int i = 0; i < row; i++) {
            model2.removeRow(0);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_showAllBorrowList;
    private javax.swing.JComboBox jComboBox_filterOption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_errorMsg;
    private javax.swing.JLabel jLabel_filter;
    private javax.swing.JLabel jLabel_title;
    private javax.swing.JPanel jPanel_titleHolder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable_allBorrowListDisplay;
    private javax.swing.JTextField jTextField_searchInput;
    // End of variables declaration//GEN-END:variables
}

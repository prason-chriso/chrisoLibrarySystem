/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chriso.library.view;

import chriso.library.controller.FileFolderCreator;
import chriso.library.controller.MarksheetDAO;
import chriso.library.miscelleneous.InputController;
import java.awt.CardLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Amit
 */
public class ExamControllerFrame extends javax.swing.JInternalFrame {
    static String sheetName;
    static String folioType;
    static String examTitle;
    static boolean FROM_SHEET_INFO_FORM;
    static ArrayList<String> subjectList = new ArrayList<String>();
    //define the tree model 
    DefaultTreeModel model ;
    DefaultTableModel tModel ;
    private static int countNode;
    
    static CardLayout carde;
    
    int maxRowValue ; // this field will keep track of what iis the maximum value of the row in the table and 
    //assign the S.N value accordingly 
    boolean ROW_HAS_VALUE; //this variable is to hold the state if there is any value in the particuular row the user want to delete
    //used during the user pressing the backspacce to delete the row
    
    
    
    
    /**
     * Creates new form ExamControllerFrame
     */
    public ExamControllerFrame() {
        carde = new CardLayout();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_left = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree_folioHierarchy = new javax.swing.JTree();
        jButton_saveFolio = new javax.swing.JButton();
        jButton_deleteFolio = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel_center = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_displayFolio = new javax.swing.JTable();
        jLabel_folioTitle = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Chriso_Marksheet_Mode: ");
        setToolTipText("");
        setPreferredSize(new java.awt.Dimension(1128, 693));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTree_folioHierarchy.setBackground(new java.awt.Color(204, 204, 204));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("ChrisoLibrary_marksheet");
        jTree_folioHierarchy.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree_folioHierarchy.setToolTipText("Add the hierarchy of the different directory and the files to store the exam record");
        jTree_folioHierarchy.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTree_folioHierarchyComponentShown(evt);
            }
        });
        jTree_folioHierarchy.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree_folioHierarchyValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree_folioHierarchy);

        jButton_saveFolio.setText(" Save Work");

        jButton_deleteFolio.setText("Delete");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Add Directory", "Add File" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jComboBox1ComponentResized(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_leftLayout = new javax.swing.GroupLayout(jPanel_left);
        jPanel_left.setLayout(jPanel_leftLayout);
        jPanel_leftLayout.setHorizontalGroup(
            jPanel_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_leftLayout.createSequentialGroup()
                .addGroup(jPanel_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_saveFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_deleteFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel_leftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel_leftLayout.setVerticalGroup(
            jPanel_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_leftLayout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jButton_saveFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jButton_deleteFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel_left, java.awt.BorderLayout.LINE_START);

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 102));
        jLabel9.setText("File will be saved  in the \"My Document\" section in C:\\\\  ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Choose the File from the left pane to view the detail information");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome to Folio Mode");
        jLabel2.setOpaque(true);

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("You can also save/ delete/rename your current file ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Create the Directory/folder to manage the mark-sheet on your own way");

        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("You can also create the new marksheet to store the record of new Examination");

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 102));
        jLabel6.setText("HINT:-");

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 0, 0));
        jLabel7.setText("Note :- Please , Don't change the name of the root directory (\"Chriso_marksheet\" ) on your system");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(73, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(27, 27, 27))
        );

        jPanel2.setOpaque(false);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jTable_displayFolio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable_displayFolio.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable_displayFolioComponentShown(evt);
            }
        });
        jTable_displayFolio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable_displayFolioKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable_displayFolioKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTable_displayFolio);

        jLabel_folioTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel_folioTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_folioTitle.setText("Marksheet Folio Title");
        jLabel_folioTitle.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(jLabel_folioTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel_folioTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel_centerLayout = new javax.swing.GroupLayout(jPanel_center);
        jPanel_center.setLayout(jPanel_centerLayout);
        jPanel_centerLayout.setHorizontalGroup(
            jPanel_centerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel_centerLayout.setVerticalGroup(
            jPanel_centerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel_center.setLayout(carde);

        getContentPane().add(jPanel_center, java.awt.BorderLayout.CENTER);
        jPanel_center.add(jPanel3, "first");
        jPanel_center.add(jPanel2, "second");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jComboBox1ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ComponentResized

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //now first of all getting the value selected by the user
        if (jTree_folioHierarchy.getSelectionPath() == null) {
            JOptionPane.showMessageDialog(null, "Select the location in the folio Hierarcy first");
            return;
        }
        JTextField t1 = new JTextField(15);
        String choice = jComboBox1.getSelectedItem().toString();
        String msg = "Enter the name of the ";
        if (choice.equalsIgnoreCase("add file")) {
            msg += "file";
        } else {
            msg += "directory";
        }
        JDialog db = new JDialog(new Mainframe(), choice, true);
        db.setSize(400, 100);
        db.setLayout(new FlowLayout());
        db.add(new JLabel(msg));
        db.add(t1);
        t1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Action event fired");
                createAndAddNodeInHierarchy(t1.getText(), choice);
                db.dispose();
            }
        });
        t1.addKeyListener(new KeyAdapter() {
            public void keytyped(KeyEvent ev) {
                char c = ev.getKeyChar();
                if (!InputController.allowWordAndNumber(ev, c)) {
                    ev.consume();
                }
            }
        });
        db.setVisible(true);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTree_folioHierarchyValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree_folioHierarchyValueChanged
        // TODO add your handling code here:
       String nodeName = evt.getPath().getLastPathComponent().toString();
       if(nodeName.contains(".xls")){//it means it is the file that the user want to view
         String filePath =   FileFolderCreator.treePathToSystemPath(evt.getPath());
         MarksheetDAO mdao = new MarksheetDAO();
         Map <String, Object[] > map =  mdao.loadMarksheet(filePath);
            if(map==null){//it means that the file is newly created and
                //there is no record yet inserted
                
                /* 
                Step 1: collect all the required inputs from the user to create new
                            excel spreadsheet file like: 
                1: name of the SpreadSheet
                2: no of subjects you want to keep record of 
                3: Examinataion heading for eg : first Mid Term test
                
                    Step 2: When user will click on next button then the nummber 
                            of textfield are to be appeared
                            where user can give the different subjects name;
                            
                    Step 3: click on finish button  and the respective column in the 
                    table as per the user input of subject name , including the 
                    additional column for the total, percentage, Division,  cGPA, and Grade
                    
                    Step 4: the respective column name and the subject name with the sheet name 
                            will be saved in the newly created Sheet
                */
                SheetInfomationForm sif = new SheetInfomationForm();
                Mainframe.jDesktopPane_mainframe.add(sif);
                sif.setVisible(true);
                
                mdao.createMarksheet();
                
              System.out.println("no record in the sheet ");
            }else{//there is already available record in the selected excel sheet
                System.out.println("there is thhe record in the excel sheet");
                Set <String> keys = map.keySet();
                for(String k: keys){
                  Object[] row = map.get(k);
                   tModel.addRow(row); //add the record of each iteration as the new table row
                   carde.show(jPanel_center, "two");
              
                System.out.println(k);         
                
                }
            }
            System.out.println(filePath + "from the exam controller");
        
            //now we need to do the task of displaying the data in the table for 
            //the record available in the excel sheet 
            
            
         
         
       }
       else{//it means that the user is currently selecting the folder that can't be viewed only expanded
           System.out.println("Folder choosen");
       }

    }//GEN-LAST:event_jTree_folioHierarchyValueChanged

    private void jTree_folioHierarchyComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTree_folioHierarchyComponentShown

    }//GEN-LAST:event_jTree_folioHierarchyComponentShown

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "\\ChrisoLibrary_marksheet";
        model =(DefaultTreeModel) jTree_folioHierarchy.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        countNode = 0;
        loadHierarchy(root , path, countNode);
        System.out.println("internal frame activated , outside block");
        
         //now if there is the input field supplied by the user then then table is 
        //to be automatically generated in case this is the first time creation
        
        //the following code will be executed only if the control has been ggained after passing through the sheetinformation internal frame
        if(FROM_SHEET_INFO_FORM){
            
         
        if (!(sheetName.equals("") || examTitle.equals("") || folioType.equals(""))){ 
           System.out.println("internal frame activated , Inside if");
         
             jLabel_folioTitle.setText(examTitle);
            if(subjectList.size()>0){
                subjectList.add(0,"S.N. ");
                subjectList.add(1,"Student's Name");
                if(folioType.equals("percentage")){
                subjectList.add("Total");
                subjectList.add("Percentage");
                subjectList.add("Division"); //first , second...
                subjectList.add("Result");//pass fail
                }
                else if(folioType.equals("grade")){
                subjectList.add("Total");
                subjectList.add("Percentage");
                subjectList.add("CGPA"); //4.0
                subjectList.add("Grade");//A, B, C
                }
                else if(folioType.equals("both")){
                subjectList.add("Total");
                subjectList.add("Percentage");
                subjectList.add("Division");
                subjectList.add("CGPA");
                subjectList.add("Grade");
                subjectList.add("Result");
                }
                              
                tModel = new DefaultTableModel(null,subjectList.toArray());
                jTable_displayFolio.setModel(tModel);
                for(int i=1; i<=50;i++){
                    tModel.addRow(new Object[]{i});
                }
                
                jTable_displayFolio.setVisible(true);
                jPanel2.updateUI();
                System.out.println("successfully updated the panel and table drawn");
                
                //noww setting up the event for the scrollbar for the scroll pane                        
          }
        } //end of if block when new input is provided for the folio 
        
        
        }//end of the if block FROM_SHEET_INFO_FORM
        // now we also need to refresh the  table with the new value after the
        //control is returned back from the sheetInformationForm
        
        
        
        
    }//GEN-LAST:event_formInternalFrameActivated

    private void jTable_displayFolioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable_displayFolioKeyTyped
        // TODO add your handling code here:
       int colNo = jTable_displayFolio.getSelectedColumn();
       if(colNo == 0){
           evt.consume();
           System.out.println("you cann't enter the S.N value manually it is automatically generated");
        }
    }//GEN-LAST:event_jTable_displayFolioKeyTyped

    private void jTable_displayFolioComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable_displayFolioComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable_displayFolioComponentShown

    private void jTable_displayFolioKeyReleased(java.awt.event.KeyEvent evt) {                                             
        // TODO add your handling code here:       
    }                                            

    private void loadHierarchy(DefaultMutableTreeNode parent, String path, int count) {
        this.countNode = count;
        File file = new File(path);
        if (file.isDirectory()) {
            String[] nodes = file.list();
            if ((nodes.length > 0)) { 

                for(String name : nodes) {
                    //now this for each loop will iterate through each of the nodes 
                    System.out.println(name + " at count " + this.countNode);
                    if (name.contains(".xls")) { //.xls means  it is file 
                        DefaultMutableTreeNode node = new DefaultMutableTreeNode(name);
                        System.out.println("path is ::" + path + "\\" + name);
                        parent.add(node);
                        this.countNode++; //updating the global static variable not the interior one
                    } else { //it is directory inside another directory
                        DefaultMutableTreeNode node = new DefaultMutableTreeNode(name);
                        parent.add(node);
                        loadHierarchy((DefaultMutableTreeNode) parent.getChildAt(this.countNode), path + "\\" + name, 0);
                    //after this statement the node which is the directory is againg 
                        //called in the recursion and the parent will be the current dirrectoory 
                        //which is updateed in each recursion 
                    
                       // this.countNode++; //this increment is required because  when the heerarchy of the child node is 
                        //loaded after the control retruned from above recursive command the next adjacent node is to be visited
                        //which has one plus count 
                    }
                   }//end of for each loop
            } else {//it denotes that the directory is empty and needn't to iterate
                this.countNode++;
                System.out.println("there is no any file in thiss dirrectory");
            }
        }
            else{
         System.out.println("no such directory existed :");
        }

        }
        //this mmethod is called when the user will give the name for the directory or the file name to creatte the node

    public void createAndAddNodeInHierarchy(String nodeName, String choice) {

        TreePath path = jTree_folioHierarchy.getSelectionPath();
        DefaultMutableTreeNode branch = (DefaultMutableTreeNode) path.getLastPathComponent();

        boolean isFile;
        if (branch.isRoot()) {
            isFile = false; //root is always folder
        } else if (branch.toString().contains(".xls")) {
            //       System.out.println("this is file in the current branch");
            isFile = true; //it is file 
        } else {
            //     System.out.println("this is folder in the current branch");
            isFile = false; //it is folder
        }

        if (branch.isRoot()) {
            if (choice.equalsIgnoreCase("add directory")) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName);
                branch.add(node);
                FileFolderCreator.createFolder(path, nodeName);
            } else {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName + ".xls");
                branch.add(node);
                FileFolderCreator.createFile(path, nodeName + ".xls");
            }
        } else if (choice.equalsIgnoreCase("add file")) {
            if (!isFile) { //trying to create file inside folder  i.e valid
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName + ".xls");
                branch.add(node);
                FileFolderCreator.createFile(path, nodeName + ".xls");
            } else { //trying to create file inside file  which cant be done so create in parent folder
                branch = (DefaultMutableTreeNode) branch.getParent();
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName + ".xls");
                branch.add(node);
                System.out.print("form controller path : " + path.getParentPath());
                FileFolderCreator.createFile(path.getParentPath(), nodeName + ".xls");
            }
        } else if (choice.equalsIgnoreCase("add directory")) {
            if (!isFile) { //try to create folder inside folder
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName);
                branch.add(node);
                FileFolderCreator.createFolder(path, nodeName);
            } else {
                //JOptionPane.showMessageDialog(null,"SORRY !!! ;( \nCannot fullfill your request...");
                branch = (DefaultMutableTreeNode) branch.getParent();
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeName);
                branch.add(node);
                FileFolderCreator.createFolder(path.getParentPath(), nodeName);
            }
        }
        SwingUtilities.updateComponentTreeUI(jTree_folioHierarchy);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_deleteFolio;
    private javax.swing.JButton jButton_saveFolio;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JLabel jLabel_folioTitle;
    public static javax.swing.JPanel jPanel2;
    public static javax.swing.JPanel jPanel3;
    public static javax.swing.JPanel jPanel_center;
    private javax.swing.JPanel jPanel_left;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable_displayFolio;
    private javax.swing.JTree jTree_folioHierarchy;
    // End of variables declaration//GEN-END:variables
}
